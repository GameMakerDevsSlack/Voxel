<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

x = 400.10;
y = 183.09;
z = 17.7;

xs = 160.10;
ys = 144.09;
zs = 17.7;

yaw = 6.70;
pitch = 10.70;

cameraNear = 1.0;
cameraFar = 1024;
cameraFov = 75;

ticks = 0;

mouseLock = false;
mouse_x_lock = 0;
mouse_y_lock = 0;

camera_look_x = 1;
camera_look_y = 0;
camera_look_z = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step

if ( mouse_check_button( mb_right ) ) {
    if (!mouseLock) {
        mouse_x_lock = window_mouse_get_x();
        mouse_y_lock = window_mouse_get_y();
    }
    
    mouseLock = true;
    if (mouseLock) {
        // Calculate mouse change
        var dx = window_mouse_get_x() - mouse_x_lock;
        var dy = window_mouse_get_y() - mouse_y_lock;
        window_mouse_set(mouse_x_lock, mouse_y_lock);
        
        // Affect pitch/yaw
        pitch -= dy / 10.0;
        yaw   -= dx / 10.0;
        pitch = min(max(-89.9, pitch), 89.9);
        
        // Calculate look vectors
        camera_look_x = cos( degtorad( -yaw ) );
        camera_look_y = sin( degtorad( -yaw ) );
        camera_look_z = sin( degtorad( pitch ) );
    }
} else {
    mouseLock = false;
}

ticks++;

// Movement
var cam_speed = 0.8;
var camera_look_x_pitch = camera_look_x * cos( degtorad( pitch ) );
var camera_look_y_pitch = camera_look_y * cos( degtorad( pitch ) );
if( keyboard_check( ord("W" ))){ x += camera_look_x_pitch * cam_speed; y += camera_look_y_pitch * cam_speed; z += camera_look_z * cam_speed }
if( keyboard_check( ord("S" ))){ x -= camera_look_x_pitch * cam_speed; y -= camera_look_y_pitch * cam_speed; z -= camera_look_z * cam_speed }
if( keyboard_check( ord("A" ))){ x += camera_look_y * cam_speed; y -= camera_look_x * cam_speed; }
if( keyboard_check( ord("D" ))){ x -= camera_look_y * cam_speed; y += camera_look_x * cam_speed; }
if( keyboard_check( ord("Q" ))) {  z += cam_speed;     }
if( keyboard_check( ord("E" ))) {  z -= cam_speed;     }

obj_camera.xs += (obj_camera.x - obj_camera.xs)*0.075;
obj_camera.ys += (obj_camera.y - obj_camera.ys)*0.075;
obj_camera.zs += (obj_camera.z - obj_camera.zs)*0.075;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UE0 - Set camera projection

var xfrom, yfrom, zfrom;
var xto, yto, zto;

// Set cameras position
xfrom = obj_camera.xs;
yfrom = obj_camera.ys;
zfrom = obj_camera.zs;

// Set cameras "look" vectors
xto = xfrom + obj_camera.camera_look_x * cos( degtorad( obj_camera.pitch ) );
yto = yfrom + obj_camera.camera_look_y * cos( degtorad( obj_camera.pitch ) );
zto = zfrom + obj_camera.camera_look_z;

d3d_set_projection_ext( xfrom, yfrom, zfrom, xto, yto, zto, 0, 0, 1, obj_camera.cameraFov, view_wview[0]/view_hview[0], obj_camera.cameraNear, obj_camera.cameraFar);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
