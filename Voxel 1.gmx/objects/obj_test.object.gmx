<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

global.voxel_palette = scr_voxel_build_rgb();

vertex_format_begin();
vertex_format_add_position_3d();
vertex_format_add_colour();
vertex_format_add_normal();
global.voxel_vft_simple = vertex_format_end();

vbf_pot = scr_voxel_load( "pot.vox", global.voxel_vft_simple );
vertex_freeze( vbf_pot );

/*
if ( display_aa == 2 ) {
    display_reset( 2, false );
} else if ( display_aa &gt;= 4 ) {
    display_reset( 4, false );
}
*/

quaternion = quaternion_init();
quaternion = quaternion_yaw( quaternion, -90 );
quaternion = quaternion_pitch( quaternion, 90 );
quaternion_basis = quaternion;

slerp_go = false;
slerp_start = current_time;
slerp_t = 0;
slerp_duration = 1400;
slerp_quaternion_a = quaternion;
slerp_quaternion_b = quaternion_random();

demo_mode = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step

if ( !demo_mode ) {
    
    if ( !slerp_go ) {
        
        if ( keyboard_check( ord( "S" ) ) ) quaternion = quaternion_rotate_x( quaternion,  1 );
        if ( keyboard_check( ord( "W" ) ) ) quaternion = quaternion_rotate_x( quaternion, -1 );
        if ( keyboard_check( ord( "Q" ) ) ) quaternion = quaternion_rotate_y( quaternion,  1 );
        if ( keyboard_check( ord( "E" ) ) ) quaternion = quaternion_rotate_y( quaternion, -1 );
        if ( keyboard_check( ord( "D" ) ) ) quaternion = quaternion_rotate_z( quaternion,  1 );
        if ( keyboard_check( ord( "A" ) ) ) quaternion = quaternion_rotate_z( quaternion, -1 );
        
        if ( keyboard_check( ord( "J" ) ) ) quaternion = quaternion_roll(  quaternion,  1 );
        if ( keyboard_check( ord( "L" ) ) ) quaternion = quaternion_roll(  quaternion, -1 );
        if ( keyboard_check( ord( "O" ) ) ) quaternion = quaternion_yaw(   quaternion,  1 );
        if ( keyboard_check( ord( "U" ) ) ) quaternion = quaternion_yaw(   quaternion, -1 );
        if ( keyboard_check( ord( "K" ) ) ) quaternion = quaternion_pitch( quaternion,  1 );
        if ( keyboard_check( ord( "I" ) ) ) quaternion = quaternion_pitch( quaternion, -1 );
        
        if ( keyboard_check_pressed( vk_space ) ) {
            slerp_go = true;
            slerp_start = current_time;
            slerp_quaternion_a = quaternion;
            slerp_quaternion_b = quaternion_basis;
        }
        
        if ( keyboard_check_pressed( vk_enter ) ) {
            demo_mode = true;
            slerp_go = false;
            slerp_start = current_time;
            slerp_quaternion_a = quaternion;
            slerp_quaternion_b = quaternion_random();
        }
        
    } else {
        
        slerp_t = clamp( (current_time - slerp_start) / slerp_duration, 0, 1 );
        quaternion = quaternion_lerp( slerp_quaternion_a, slerp_quaternion_b, scr_juju_ease_quad_inout( slerp_t ) );
        if ( slerp_t &gt;= 1 ) slerp_go = false;
        
    }
    
} else {
        
    if ( keyboard_check_pressed( vk_enter ) ) demo_mode = false;
    
    if ( keyboard_check_pressed( vk_space ) ) {
        demo_mode = false;
        slerp_go = true;
        slerp_start = current_time;
        slerp_quaternion_a = quaternion;
        slerp_quaternion_b = quaternion_basis;
    }
    
    slerp_t = clamp( (current_time - slerp_start) / slerp_duration, 0, 1 );
    quaternion = quaternion_lerp( slerp_quaternion_a, slerp_quaternion_b, scr_juju_ease_quad_inout( slerp_t ) );
    
    if ( slerp_t &gt;= 1 ) {
        slerp_start = current_time;
        slerp_quaternion_a = quaternion;
        slerp_quaternion_b = quaternion_random();
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw GUI

draw_set_font( fnt_cambria16 );
draw_set_colour( c_white );
draw_set_valign( fa_bottom );
draw_text( 5, room_height - 5, string( fps ) + "/" + string( floor( fps_real ) ) );
draw_set_valign( fa_top );
draw_text( 5, 5, "MagicaVoxel importer#26th Oct 2016#@jujuadams##Art by @AngryMobOfSteve##WASDQE - Rotate in world#IJKLUO - Rotate locally#Enter - Toggle demo mode#Space - Return to upright" );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

d3d_start();
d3d_set_projection_ortho( 0, 0, room_width, room_height, 0 );

//shader_set( shd_default );
d3d_set_lighting( true );
d3d_light_define_ambient( c_black );
d3d_light_define_point( 0,   room_width/4, room_height/2, -room_width/2, 1000, c_ltgray );
d3d_light_define_point( 1,   room_width/2,             0,             0,  900, make_colour_rgb( 255, 200, 200 ) );
d3d_light_define_point( 2, 3*room_width/4, room_height/2, -room_width/2,  800, make_colour_rgb(   0,   0, 155 ) );
d3d_light_enable( 0, true );
d3d_light_enable( 1, true );
d3d_light_enable( 2, true );

d3d_transform_add_translation( -8, -8, -8 );
matrix_multiply_world( quaternion_matrix( quaternion ) );
d3d_transform_add_scaling( 32, 32, 1 );
d3d_transform_add_translation( room_width/2, room_height/2, 0 );

vertex_submit( vbf_pot, pr_trianglelist, -1 );
shader_reset();

d3d_transform_set_identity();

d3d_end();
d3d_set_lighting( false );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
