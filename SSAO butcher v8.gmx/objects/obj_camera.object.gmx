<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

camera_from_target_x = 400;
camera_from_target_y = 183;
camera_from_target_z = 17;

camera_from_x = 160;
camera_from_y = 144;
camera_from_z = 17;

camera_up_x = 0;
camera_up_y = 0;
camera_up_z = 1;

camera_look_x = 1;
camera_look_y = 0;
camera_look_z = 0;

camera_yaw = 6.7;
camera_pitch = 10.7;

camera_znear = 1;
camera_zfar = 1024;
camera_fov = 75;

camera_to_x = camera_from_x + camera_look_x * dcos( camera_pitch );
camera_to_y = camera_from_y + camera_look_y * dcos( camera_pitch );
camera_to_z = camera_from_z + camera_look_z;

mouse_lock = false;
mouse_lock_x = 0;
mouse_lock_y = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step

if ( mouse_check_button_pressed( mb_right ) ) {
    
    mouse_lock = !mouse_lock;
    
    if ( mouse_lock ) {
        mouse_lock_x = window_get_width()/2;
        mouse_lock_y = window_get_height()/2;
        window_mouse_set( mouse_lock_x, mouse_lock_y );
        window_set_cursor( cr_none );
    }
    
} else if ( mouse_lock ) {
    
    // Calculate mouse change
    var _dx = window_mouse_get_x() - mouse_lock_x;
    var _dy = window_mouse_get_y() - mouse_lock_y;
    window_mouse_set( mouse_lock_x, mouse_lock_y );
    
    // Affect pitch/yaw
    camera_pitch -= _dy * 0.1;
    camera_yaw   -= _dx * 0.1;
    camera_pitch = clamp( camera_pitch, -89.9, 89.9);
    
    // Calculate look vectors
    camera_look_x = dcos( -camera_yaw );
    camera_look_y = dsin( -camera_yaw );
    camera_look_z = dsin( camera_pitch );
    
} else {
    
    window_set_cursor( cr_default );
    
}

// Movement
var _cam_speed = 0.8;
var _camera_look_x_pitch = camera_look_x * dcos( camera_pitch );
var _camera_look_y_pitch = camera_look_y * dcos( camera_pitch );
if( keyboard_check( ord( "W" ) ) ) { camera_from_target_x += _camera_look_x_pitch * _cam_speed; camera_from_target_y += _camera_look_y_pitch * _cam_speed; camera_from_target_z += camera_look_z * _cam_speed }
if( keyboard_check( ord( "S" ) ) ) { camera_from_target_x -= _camera_look_x_pitch * _cam_speed; camera_from_target_y -= _camera_look_y_pitch * _cam_speed; camera_from_target_z -= camera_look_z * _cam_speed }
if( keyboard_check( ord( "A" ) ) ) { camera_from_target_x += camera_look_y * _cam_speed;        camera_from_target_y -= camera_look_x * _cam_speed; }
if( keyboard_check( ord( "D" ) ) ) { camera_from_target_x -= camera_look_y * _cam_speed;        camera_from_target_y += camera_look_x * _cam_speed; }
if( keyboard_check( ord( "Q" ) ) ) { camera_from_target_z += _cam_speed; }
if( keyboard_check( ord( "E" ) ) ) { camera_from_target_z -= _cam_speed; }

camera_from_x = lerp( camera_from_x, camera_from_target_x, 0.1 );
camera_from_y = lerp( camera_from_y, camera_from_target_y, 0.1 );
camera_from_z = lerp( camera_from_z, camera_from_target_z, 0.1 );

camera_to_x = camera_from_x + camera_look_x * dcos( camera_pitch );
camera_to_y = camera_from_y + camera_look_y * dcos( camera_pitch );
camera_to_z = camera_from_z + camera_look_z;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UE0 - Set camera projection

d3d_set_projection_ext( camera_from_x, camera_from_y, camera_from_z,
                        camera_to_x,   camera_to_y,   camera_to_z,
                        camera_up_x,   camera_up_y,   camera_up_z,
                        camera_fov, view_wview[0]/view_hview[0],
                        camera_znear, camera_zfar);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
