<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

ssao_on   = true;
ssao_hlsl = false;

ssao_samples    = 20;
ssao_radius     = 0.8;
ssao_strength   = 0.12;
ssao_power      = 3;
ssao_resolution = 1;
ssao_blur       = 1;
ssao_enable     = true;
ssao_kernel     = ssao_generate_poisson_distribution( ssao_samples );
ssao_srf_noise  = ssao_generate_noise( 4 );

ssao_srf_depth  = noone;
ssao_srf_normal = noone;
ssao_srf_ssao   = noone;
ssao_srf_temp   = noone;
srf_diffuse     = noone;

matrix_inverse_projection = -1;
matrix_proj               = -1;

light_on = true;

debug            = false;
debug_x          = view_wview[0] - 16 - 240;
debug_y          = view_hview[0] - 16 - 50;
fps_real_avg_cum = 1;
fps_real_count   = 0;
fps_real_avg     = fps_real;
fps_ms           = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step

if ( keyboard_check_pressed( vk_f1 ) ) debug = !debug;
if ( keyboard_check_pressed( vk_f10 ) ) ssao_on = !ssao_on;
if ( keyboard_check_pressed( vk_f11 ) ) light_on = !light_on;
with( obj_light ) if ( keyboard_check_pressed( vk_f12 ) ) light_soft = !light_soft;
if ( keyboard_check_pressed( vk_escape ) ) game_end();

if ( keyboard_check_pressed( vk_control ) ) {
    with( obj_light ) {
        light_from_x = obj_camera.camera_from_x;
        light_from_y = obj_camera.camera_from_y;
        light_from_z = obj_camera.camera_from_z;
        light_to_x   = obj_camera.camera_to_x;
        light_to_y   = obj_camera.camera_to_y;
        light_to_z   = obj_camera.camera_to_z;
    }
}

fps_real_avg_cum += fps_real;
fps_real_count++;

if( fps_real_count &gt;= 60 ){
    fps_real_avg = fps_real_avg_cum/60;
    fps_real_avg_cum = 0;
    fps_real_count = 0;
}

fps_ms = 1000/(fps_real_avg+0.01);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw GUI Begin

if ( ssao_on ) {
    
    shader_set( shd_ssao_combine );
    texture_set_stage( shader_get_sampler_index( shd_ssao_combine, "diffuse_buffer" ), surface_get_texture( srf_diffuse) );
    texture_set_stage( shader_get_sampler_index( shd_ssao_combine, "ssao_buffer"    ), surface_get_texture( ssao_srf_ssao ) );
    texture_set_interpolation_ext( shader_get_sampler_index( shd_ssao_combine, "ssao_buffer" ), true);
    draw_surface( srf_diffuse, 0, 0 );
    shader_reset();
    
} else {
    
    draw_surface( srf_diffuse, 0, 0 );
    
}

/*
with( obj_camera ) event_user( 0 );
with( par_3d ) {
    if ( select_over ) {
        d3d_set_fog( true, c_white, 0, 0 );
        event_user( 0 );
        d3d_set_fog( false, c_white, 0, 0 );
    }
}
d3d_set_projection_ortho( 0, 0, view_wview, view_hview, 0 );
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw GUI

if ( debug ) {
    
    draw_surface_ext( ssao_srf_normal, 0, 0, 0.25 / ssao_resolution, 0.25 / ssao_resolution, 0, c_white, 1 );
    draw_set_color(c_black);
    draw_text(8, 8, "Normal Buffer");
    
    draw_surface_ext( ssao_srf_depth, 320, 0, 0.25 / ssao_resolution, 0.25 / ssao_resolution, 0, c_white, 1 );
    draw_set_color(c_black);
    draw_text(328, 8, "Linearized Depth Buffer");
    
    draw_surface_ext( srf_diffuse, 640, 0, 0.25, 0.25, 0, c_white, 1 );
    draw_set_color(c_black);
    draw_text(648, 8, "Diffuse Buffer");
    
    draw_surface_ext( ssao_srf_ssao, 960, 0, 0.25 / ssao_resolution, 0.25 / ssao_resolution, 0, c_white, 1 );
    draw_set_color(c_black);
    draw_text(968, 8, "SSAO Buffer");
    
} else {
        
    draw_set_font( fnt_cambria16 );
    draw_set_colour( c_white );
    draw_set_valign( fa_bottom );
    draw_text( 5, room_height - 5, string( fps_real_avg ) + "/" + string( fps_ms ) );
    draw_set_valign( fa_top );
    draw_text( 5, 5, "MagicaVoxel importer#" +
                     "3rd Nov 2016#@jujuadams##" +
                     "Art by @AngryMobOfSteve#" +
                     "Shadow Mapping by @XorDev#" +
                     "SSAO by @MishMashGames##" +
                     "Space - Lock/Unlock mouse#" +
                     "WASDQE - Move#" + 
                     "Control - Place light##" +
                     "TFGHRY - Rotate pots in world#" +
                     "IJKLUO - Rotate pots locally#" +
                     "F10 - Turn off SSAO#" +
                     "F11 - Turn off light" );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

d3d_start();
d3d_set_culling( true );
d3d_set_hidden( true );
d3d_set_perspective( true );

with( obj_camera ) event_user( 0 );
if ( !surface_exists( srf_diffuse ) ) srf_diffuse = surface_create( view_wview[0], view_hview[0]);

draw_enable_alphablend( false );
ssao_render_light();
draw_enable_alphablend( true );

if ( ssao_on ) {

    if ( !surface_exists( ssao_srf_depth  ) ) ssao_srf_depth  = surface_create( view_wview[0] * ssao_resolution, view_hview[0] * ssao_resolution );
    if ( !surface_exists( ssao_srf_normal ) ) ssao_srf_normal = surface_create( view_wview[0] * ssao_resolution, view_hview[0] * ssao_resolution );
    if ( !surface_exists( ssao_srf_ssao   ) ) ssao_srf_ssao   = surface_create( view_wview[0] * ssao_resolution, view_hview[0] * ssao_resolution );
    if ( !surface_exists( ssao_srf_temp   ) ) ssao_srf_temp   = surface_create( view_wview[0] * ssao_resolution, view_hview[0] * ssao_resolution );
    
    if( !is_array( matrix_proj ) ) {
        matrix_proj = matrix_get( matrix_projection );
        matrix_inverse_projection = matrix_invert( matrix_proj );
    }
    
    draw_enable_alphablend( false );
    if ( ssao_hlsl ) {
        ssao_render_hlsl();
    } else {
        ssao_render_normal();
        ssao_render_depth();
    }
    ssao_render_ssao();
    ssao_render_blur();
    draw_enable_alphablend( true );

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
