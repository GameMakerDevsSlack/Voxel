<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

quaternion = quaternion_init();
quaternion_basis = quaternion;

slerp_go = false;
slerp_start = current_time;
slerp_t = 0;
slerp_duration = 1400;
slerp_quaternion_a = quaternion;
slerp_quaternion_b = quaternion_random();

demo_mode = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step

if ( keyboard_check( ord( "G" ) ) )
or ( keyboard_check( ord( "T" ) ) )
or ( keyboard_check( ord( "F" ) ) )
or ( keyboard_check( ord( "H" ) ) )
or ( keyboard_check( ord( "Y" ) ) )
or ( keyboard_check( ord( "R" ) ) )
or ( keyboard_check( ord( "J" ) ) )
or ( keyboard_check( ord( "L" ) ) )
or ( keyboard_check( ord( "O" ) ) )
or ( keyboard_check( ord( "U" ) ) )
or ( keyboard_check( ord( "K" ) ) )
or ( keyboard_check( ord( "I" ) ) ) demo_mode = false;

if ( !demo_mode ) {
    
    if ( !slerp_go ) {
        
        if ( keyboard_check( ord( "G" ) ) ) quaternion = quaternion_rotate_x( quaternion,  2 );
        if ( keyboard_check( ord( "T" ) ) ) quaternion = quaternion_rotate_x( quaternion, -2 );
        if ( keyboard_check( ord( "F" ) ) ) quaternion = quaternion_rotate_y( quaternion,  2 );
        if ( keyboard_check( ord( "H" ) ) ) quaternion = quaternion_rotate_y( quaternion, -2 );
        if ( keyboard_check( ord( "Y" ) ) ) quaternion = quaternion_rotate_z( quaternion,  2 );
        if ( keyboard_check( ord( "R" ) ) ) quaternion = quaternion_rotate_z( quaternion, -2 );
        
        if ( keyboard_check( ord( "J" ) ) ) quaternion = quaternion_roll(  quaternion,  2 );
        if ( keyboard_check( ord( "L" ) ) ) quaternion = quaternion_roll(  quaternion, -2 );
        if ( keyboard_check( ord( "O" ) ) ) quaternion = quaternion_yaw(   quaternion,  2 );
        if ( keyboard_check( ord( "U" ) ) ) quaternion = quaternion_yaw(   quaternion, -2 );
        if ( keyboard_check( ord( "K" ) ) ) quaternion = quaternion_pitch( quaternion,  2 );
        if ( keyboard_check( ord( "I" ) ) ) quaternion = quaternion_pitch( quaternion, -2 );
        
        if ( keyboard_check_pressed( vk_space ) ) {
            slerp_go = true;
            slerp_start = current_time;
            slerp_quaternion_a = quaternion;
            slerp_quaternion_b = quaternion_basis;
        }
        
        if ( keyboard_check_pressed( vk_enter ) ) {
            demo_mode = true;
            slerp_go = false;
            slerp_start = current_time;
            slerp_quaternion_a = quaternion;
            slerp_quaternion_b = quaternion_random();
        }
        
    } else {
        
        slerp_t = clamp( (current_time - slerp_start) / slerp_duration, 0, 1 );
        quaternion = quaternion_lerp( slerp_quaternion_a, slerp_quaternion_b, scr_juju_ease_quad_inout( slerp_t ) );
        if ( slerp_t &gt;= 1 ) slerp_go = false;
        
    }
    
} else {
        
    if ( keyboard_check_pressed( vk_enter ) ) demo_mode = false;
    
    if ( keyboard_check_pressed( vk_space ) ) {
        demo_mode = false;
        slerp_go = true;
        slerp_start = current_time;
        slerp_quaternion_a = quaternion;
        slerp_quaternion_b = quaternion_basis;
    }
    
    slerp_t = clamp( (current_time - slerp_start) / slerp_duration, 0, 1 );
    quaternion = quaternion_lerp( slerp_quaternion_a, slerp_quaternion_b, scr_juju_ease_quad_inout( slerp_t ) );
    
    if ( slerp_t &gt;= 1 ) {
        slerp_start = current_time;
        slerp_quaternion_a = quaternion;
        slerp_quaternion_b = quaternion_random();
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UE0 - Draw

d3d_transform_set_translation( -8, -8, -8 );
matrix_multiply_world( quaternion_matrix( quaternion ) );
d3d_transform_add_translation( x, y, 40 + 20 * sin( x + y ) );
vertex_submit( global.vbf_pot, pr_trianglelist, -1 );
d3d_transform_set_identity();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
