<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

depth_buffer     = noone;
normal_buffer    = noone;
ssao_buffer      = noone;
ssao_buffer_temp = noone;
diffuse_buffer   = noone;

matrix_inverse_projection = -1;
matrix_proj               = -1;

hlsl = false;

debug            = true;
debugWidth       = 240;
debugHeight      = 50;
debugX           = view_wview[0] - 16 - debugWidth;
debugY           = view_hview[0] - 16 - debugHeight;
fps_real_avg_cum = 1;
fps_real_count   = 0;
fps_real_avg     = fps_real;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step

if ( keyboard_check_pressed( vk_escape ) ) game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw GUI

if ( global.SSAO_ENABLE ) {
    
    shader_set( sh_post_combine );
    
    texture_set_stage( shader_get_sampler_index( sh_post_combine, "diffuse_buffer" ), surface_get_texture( diffuse_buffer ) );
    texture_set_stage( shader_get_sampler_index( sh_post_combine, "ssao_buffer"    ), surface_get_texture( ssao_buffer    ) );
    texture_set_interpolation_ext( shader_get_sampler_index( sh_post_combine, "ssao_buffer" ), true);
    
    draw_surface( diffuse_buffer, 0, 0 );
    
    shader_reset();
    
} else {
    
    draw_surface( diffuse_buffer, 0, 0 );
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug

if ( debug ) {
    
    draw_set_color( c_black );
    draw_set_alpha( 0.5 );
    draw_roundrect( debugX, debugY, debugX + debugWidth, debugY + debugHeight - 6, false );
    
    draw_set_alpha( 0.75 );
    draw_set_color( c_white );
    draw_text( debugX + 12, debugY + 4, "FPS:" );
    draw_text( debugX + 12, debugY + 4 + 12, "FPS Real:" );
    draw_text( debugX + 12, debugY + 4 + 24, "Frame(ms):" );
    
    draw_set_color( c_yellow );
    draw_text( debugX + 12 + 64, debugY + 4, string( fps ) );
    
    
    fps_real_avg_cum += fps_real;
    fps_real_count ++;
    if( fps_real_count &gt;= 60 ){
        fps_real_avg = fps_real_avg_cum/60;
        fps_real_avg_cum = 0;
        fps_real_count = 0;
    }
    draw_text( debugX + 12 + 64, debugY + 4 + 12, string( fps_real_avg ) );
    draw_set_color( c_lime );
    draw_text( debugX + 12 + 64, debugY + 4 + 24, string( 1000/(fps_real_avg+0.01) )+" ms" );
    
    draw_set_alpha( 1 );
    
}

if ( debug ) {
    
    draw_surface_ext( obj_ssao.normal_buffer, 0, 0, 0.25 / global.SSAO_RESOLUTION, 0.25 / global.SSAO_RESOLUTION, 0, c_white, 1 );
    draw_set_color(c_black);
    draw_text(8, 8, "Normal Buffer");
    
    draw_surface_ext( obj_ssao.depth_buffer, 320, 0, 0.25 / global.SSAO_RESOLUTION, 0.25 / global.SSAO_RESOLUTION, 0, c_white, 1 );
    draw_set_color(c_black);
    draw_text(328, 8, "Linearized Depth Buffer");
    
    draw_surface_ext( obj_ssao.diffuse_buffer, 640, 0, 0.25, 0.25, 0, c_white, 1 );
    draw_set_color(c_black);
    draw_text(648, 8, "Diffuse Buffer");
    
    draw_surface_ext( obj_ssao.ssao_buffer, 960, 0, 0.25 / global.SSAO_RESOLUTION, 0.25 / global.SSAO_RESOLUTION, 0, c_white, 1 );
    draw_set_color(c_black);
    draw_text(968, 8, "SSAO Buffer");
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

if ( !surface_exists( depth_buffer     ) ) depth_buffer     = surface_create( view_wview[0] * global.SSAO_RESOLUTION, view_hview[0] * global.SSAO_RESOLUTION );
if ( !surface_exists( normal_buffer    ) ) normal_buffer    = surface_create( view_wview[0] * global.SSAO_RESOLUTION, view_hview[0] * global.SSAO_RESOLUTION );
if ( !surface_exists( ssao_buffer      ) ) ssao_buffer      = surface_create( view_wview[0] * global.SSAO_RESOLUTION, view_hview[0] * global.SSAO_RESOLUTION );
if ( !surface_exists( ssao_buffer_temp ) ) ssao_buffer_temp = surface_create( view_wview[0] * global.SSAO_RESOLUTION, view_hview[0] * global.SSAO_RESOLUTION );
if ( !surface_exists( diffuse_buffer   ) ) diffuse_buffer   = surface_create( view_wview[0], view_hview[0]);

d3d_start();
d3d_set_lighting( false );
d3d_set_culling( false );
d3d_set_hidden( true );
d3d_set_perspective( true );

if( !is_array( matrix_proj ) ) {
    with( obj_camera ) event_user( 0 );
    matrix_proj = matrix_get( matrix_projection );
    matrix_inverse_projection = InverseMatrix4( matrix_proj );
}

draw_enable_alphablend( false );

if ( hlsl ) {
    render_hlsl();
} else {
    render_diffuse_buffer();
    render_normal_buffer();
    render_depth_buffer();
}

render_ssao_buffer();
render_blur_ssao();

draw_enable_alphablend( true );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
